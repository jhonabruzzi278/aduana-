---
import BaseLayout from '../../layouts/BaseLayout.astro';
---

<BaseLayout title="Acceso para Turistas - Sistema Aduanero">
  <div class="min-h-screen bg-gradient-to-br from-blue-900 to-blue-700 flex items-center justify-center px-4 py-12">
    <div class="bg-white shadow-2xl rounded-xl w-full max-w-md p-8 space-y-6">
      <!-- Encabezado -->
      <div class="text-center">
        <a href="/" class="inline-block mb-4 group">
          <svg class="w-12 h-12 text-blue-600 mx-auto group-hover:text-blue-700 transition-colors" fill="none" stroke="currentColor" viewBox="0 0 24 24">
            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M9 12l2 2 4-4m5.618-4.016A11.955 11.955 0 0112 2.944a11.955 11.955 0 01-8.618 3.04A12.02 12.02 0 003 9c0 5.591 3.824 10.29 9 11.622 5.176-1.332 9-6.03 9-11.622 0-1.042-.133-2.052-.382-3.016z"></path>
          </svg>
        </a>
        <h1 class="text-2xl font-bold text-gray-800">Acceso para Turistas</h1>
        <p class="text-sm text-gray-500 mt-1">Ingresa tus credenciales para continuar</p>
      </div>
      
      <!-- Formulario -->
      <form id="login-form" class="space-y-4">
        <div>
          <label for="email" class="block text-sm font-medium text-gray-700 mb-1">
            Correo electrónico
          </label>
          <input 
            id="email" 
            type="email" 
            required
            autocomplete="email"
            class="w-full p-3 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-blue-500 transition-colors" 
            placeholder="tu.correo@ejemplo.com"
          />
          <p id="email-error" class="text-red-600 text-sm mt-1 hidden" role="alert"></p>
        </div>
        
        <div>
          <label for="password" class="block text-sm font-medium text-gray-700 mb-1">
            Contraseña
          </label>
          <input 
            id="password" 
            type="password" 
            required
            autocomplete="current-password"
            class="w-full p-3 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-blue-500 transition-colors" 
            placeholder="••••••••"
          />
          <p id="password-error" class="text-red-600 text-sm mt-1 hidden" role="alert"></p>
        </div>
        
        <div class="flex items-center justify-between text-sm">
          <div class="flex items-center">
            <input 
              id="remember" 
              type="checkbox" 
              class="h-4 w-4 text-blue-600 focus:ring-blue-500 border-gray-300 rounded"
            >
            <label for="remember" class="ml-2 block text-gray-700">
              Recordar sesión
            </label>
          </div>
          <a 
            href="/recuperar-clave" 
            class="font-medium text-blue-600 hover:text-blue-500 transition-colors"
          >
            ¿Olvidaste tu contraseña?
          </a>
        </div>
        
        <button 
          type="submit" 
          id="submit-button"
          class="w-full py-3 bg-blue-600 text-white font-medium rounded-lg hover:bg-blue-700 focus:outline-none focus:ring-2 focus:ring-blue-500 focus:ring-offset-2 transition-all duration-200 disabled:opacity-50 disabled:cursor-not-allowed"
        >
          <span id="button-text">Iniciar sesión</span>
        </button>
      </form>
      
      <!-- Mensaje de error global -->
      <div id="error-message" class="hidden text-sm text-center text-red-600 bg-red-50 p-3 rounded-lg border border-red-200" role="alert">
      </div>
      
      <!-- Enlaces adicionales -->
      <div class="text-center text-sm text-gray-500 space-y-2">
        <p>
          ¿No tienes una cuenta? 
          <a href="/registro/turista" class="font-medium text-blue-600 hover:text-blue-500 transition-colors">
            Regístrate aquí
          </a>
        </p>
        <p>
          <a href="/" class="text-gray-400 hover:text-gray-600 transition-colors">
            ← Volver al inicio
          </a>
        </p>
      </div>
    </div>
  </div>

  <script>
    // Verificación inicial de que el DOM esté cargado
    if (document.readyState === 'loading') {
      document.addEventListener('DOMContentLoaded', initializeLogin);
    } else {
      initializeLogin();
    }

    function initializeLogin() {
      try {
        // Configuración y constantes
        const AUTH_CONFIG = {
          redirectUrl: '/turista/dashboard',
          minPasswordLength: 6,
          maxAttempts: 5,
          lockoutTime: 15 * 60 * 1000 // 15 minutos
        };

        // Referencias a elementos del DOM con verificación de existencia
        const elements = {
          form: null as HTMLElement | null,
          email: null as HTMLElement | null,
          password: null as HTMLElement | null,
          submitButton: null as HTMLElement | null,
          buttonText: null as HTMLElement | null,
          errorMessage: null as HTMLElement | null,
          emailError: null as HTMLElement | null,
          passwordError: null as HTMLElement | null
        };

        // Función para obtener elementos del DOM de forma segura
        function getElement(id: string) {
          try {
            const element = document.getElementById(id);
            if (!element) {
              console.error(`Elemento con ID '${id}' no encontrado`);
              return null;
            }
            return element;
          } catch (error) {
            console.error(`Error al obtener elemento '${id}':`, error);
            return null;
          }
        }

        // Inicializar referencias a elementos
        function initializeElements() {
          try {
            elements.form = getElement('login-form');
            elements.email = getElement('email');
            elements.password = getElement('password');
            elements.submitButton = getElement('submit-button');
            elements.buttonText = getElement('button-text');
            elements.errorMessage = getElement('error-message');
            elements.emailError = getElement('email-error');
            elements.passwordError = getElement('password-error');

            // Verificar elementos críticos
            const criticalElements = ['form', 'email', 'password', 'submitButton'] as const;
            for (const key of criticalElements) {
              if (!elements[key as keyof typeof elements]) {
                throw new Error(`Elemento crítico '${key}' no encontrado`);
              }
            }

            return true;
          } catch (error) {
            console.error('Error al inicializar elementos:', error);
            showFallbackError('Error al cargar la página. Por favor, recarga la página.');
            return false;
          }
        }

        // Función de error de respaldo cuando los elementos no están disponibles
        function showFallbackError(message: string) {
          try {
            const fallbackDiv = document.createElement('div');
            fallbackDiv.className = 'fixed top-4 left-1/2 transform -translate-x-1/2 bg-red-100 border border-red-400 text-red-700 px-4 py-3 rounded z-50';
            fallbackDiv.textContent = message || 'Ha ocurrido un error inesperado';
            document.body?.appendChild(fallbackDiv);
            
            setTimeout(() => {
              try {
                document.body?.removeChild(fallbackDiv);
              } catch (e) {
                console.error('Error al remover mensaje de error:', e);
              }
            }, 5000);
          } catch (error) {
            console.error('Error al mostrar mensaje de respaldo:', error);
            alert(message || 'Ha ocurrido un error inesperado');
          }
        }

        // Utilidades con manejo de errores
        const utils = {
          showError(element: HTMLElement | null, message: string) {
            try {
              if (!element) {
                console.error('Elemento para mostrar error es null');
                return false;
              }
              if (typeof message !== 'string' || !message.trim()) {
                console.error('Mensaje de error inválido:', message);
                return false;
              }
              element.textContent = message;
              element.classList?.remove('hidden');
              return true;
            } catch (error) {
              console.error('Error al mostrar mensaje de error:', error);
              return false;
            }
          },

          hideError(element: HTMLElement | null) {
            try {
              if (!element) {
                return false;
              }
              element.classList?.add('hidden');
              return true;
            } catch (error) {
              console.error('Error al ocultar mensaje de error:', error);
              return false;
            }
          },

          hideAllErrors() {
            try {
              this.hideError(elements.errorMessage);
              this.hideError(elements.emailError);
              this.hideError(elements.passwordError);
            } catch (error) {
              console.error('Error al ocultar todos los errores:', error);
            }
          },

          setLoading(isLoading: boolean) {
            try {
              if (!elements.submitButton || !elements.buttonText) {
                console.error('Elementos de botón no disponibles para setLoading');
                return false;
              }

              if (typeof isLoading !== 'boolean') {
                console.error('isLoading debe ser un booleano:', isLoading);
                return false;
              }

              (elements.submitButton as HTMLButtonElement).disabled = isLoading;
              elements.buttonText.textContent = isLoading ? 'Iniciando sesión...' : 'Iniciar sesión';
              return true;
            } catch (error) {
              console.error('Error al establecer estado de carga:', error);
              return false;
            }
          },

          validateEmail(email: string) {
            try {
              if (typeof email !== 'string') {
                return false;
              }
              const emailRegex = /^[^\s@]+@[^\s@]+\.[^\s@]+$/;
              return emailRegex.test(email.trim());
            } catch (error) {
              console.error('Error al validar email:', error);
              return false;
            }
          },

          validatePassword(password: string | any[]) {
            try {
              if (typeof password !== 'string') {
                return false;
              }
              return password.length >= AUTH_CONFIG.minPasswordLength;
            } catch (error) {
              console.error('Error al validar contraseña:', error);
              return false;
            }
          },

          sanitizeInput(input: string) {
            try {
              if (typeof input !== 'string') {
                return '';
              }
              return input.trim().replace(/[<>]/g, '');
            } catch (error) {
              console.error('Error al sanitizar input:', error);
              return '';
            }
          }
        };

        // Manejo de autenticación con errores completos
        const auth = {
          async signIn(email: string, password: string) {
            try {
              if (!email || !password) {
                throw new Error('Email y contraseña son requeridos');
              }

              // Aquí irá la integración con Supabase
              // const { data, error } = await supabase.auth.signInWithPassword({
              //   email,
              //   password
              // });
              // 
              // if (error) throw error;
              // return data;

              // Simulación temporal (remover en producción)
              await new Promise(resolve => setTimeout(resolve, 1000));
              
              // Simular diferentes casos de prueba
              if (email === 'test@error.com') {
                throw new Error('Invalid login credentials');
              }
              
              if (email === 'test@network.com') {
                throw new Error('Network error');
              }
              
              return { success: true };
            } catch (error) {
              console.error('Error en signIn:', error);
              throw error;
            }
          },

          getErrorMessage(error: { message: any; toString: () => any; }) {
            try {
              if (!error) {
                return 'Error desconocido';
              }

              const errorMessage = error.message || error.toString() || 'Error desconocido';
              
              const errorMap = {
                'Invalid login credentials': 'Credenciales incorrectas. Verifica tu correo y contraseña.',
                'Email not confirmed': 'Por favor, confirma tu correo electrónico antes de iniciar sesión.',
                'Too many requests': 'Demasiados intentos. Espera unos minutos antes de volver a intentar.',
                'User not found': 'No existe una cuenta con este correo electrónico.',
                'Network error': 'Error de conexión. Verifica tu conexión a internet.',
                'Weak password': 'La contraseña es muy débil.',
                'Email already in use': 'Este correo ya está registrado.',
                'Invalid email': 'El formato del correo no es válido.',
                'Password too short': 'La contraseña es muy corta.',
                'Account locked': 'Tu cuenta ha sido bloqueada temporalmente.',
              };

              return (errorMap as any)[errorMessage] || 'Ocurrió un error inesperado. Por favor, inténtalo de nuevo.';
            } catch (error) {
              console.error('Error al obtener mensaje de error:', error);
              return 'Error al procesar la respuesta del servidor.';
            }
          }
        };

        // Validación del formulario con manejo completo de errores
        function validateForm() {
          try {
            if (!elements.email || !elements.password) {
              console.error('Elementos de formulario no disponibles');
              return false;
            }

            const emailValue = (elements.email as HTMLInputElement).value;
            const passwordValue = (elements.password as HTMLInputElement).value;

            if (emailValue === null || emailValue === undefined) {
              utils.showError(elements.emailError, 'Error al leer el correo electrónico');
              return false;
            }

            if (passwordValue === null || passwordValue === undefined) {
              utils.showError(elements.passwordError, 'Error al leer la contraseña');
              return false;
            }

            const email = utils.sanitizeInput(emailValue);
            const password = utils.sanitizeInput(passwordValue);
            let isValid = true;

            utils.hideAllErrors();

            // Validar email
            if (!email) {
              utils.showError(elements.emailError, 'El correo electrónico es requerido');
              isValid = false;
            } else if (!utils.validateEmail(email)) {
              utils.showError(elements.emailError, 'Ingresa un correo electrónico válido');
              isValid = false;
            }

            // Validar contraseña
            if (!password) {
              utils.showError(elements.passwordError, 'La contraseña es requerida');
              isValid = false;
            } else if (!utils.validatePassword(password)) {
              utils.showError(elements.passwordError, `La contraseña debe tener al menos ${AUTH_CONFIG.minPasswordLength} caracteres`);
              isValid = false;
            }

            return isValid;
          } catch (error) {
            console.error('Error en validateForm:', error);
            utils.showError(elements.errorMessage, 'Error al validar el formulario');
            return false;
          }
        }

        // Manejador del envío del formulario con manejo completo de errores
        function handleFormSubmit(e: { preventDefault: () => void; }) {
          try {
            if (!e) {
              console.error('Evento de formulario es null');
              return;
            }

            e.preventDefault();

            if (!validateForm()) {
              return;
            }

            if (!elements.email || !elements.password) {
              utils.showError(elements.errorMessage, 'Error al acceder a los campos del formulario');
              return;
            }

            const emailValue = (elements.email as HTMLInputElement).value;
            const passwordValue = (elements.password as HTMLInputElement).value;

            if (emailValue === null || emailValue === undefined || 
                passwordValue === null || passwordValue === undefined) {
              utils.showError(elements.errorMessage, 'Error al leer los datos del formulario');
              return;
            }

            const email = utils.sanitizeInput(emailValue);
            const password = utils.sanitizeInput(passwordValue);

            if (!email || !password) {
              utils.showError(elements.errorMessage, 'Datos del formulario inválidos');
              return;
            }

            utils.setLoading(true);

            auth.signIn(email, password)
              .then((result) => {
                try {
                  if (!result) {
                    throw new Error('Respuesta vacía del servidor');
                  }
                  
                  // Redirección exitosa
                  if (typeof window !== 'undefined' && window.location) {
                    window.location.href = AUTH_CONFIG.redirectUrl;
                  } else {
                    throw new Error('No se puede redireccionar');
                  }
                } catch (error) {
                  console.error('Error al procesar resultado exitoso:', error);
                  utils.showError(elements.errorMessage, 'Error al procesar la respuesta del servidor');
                }
              })
              .catch((error) => {
                try {
                  console.error('Error de autenticación:', error);
                  const friendlyMessage = auth.getErrorMessage(error);
                  utils.showError(elements.errorMessage, friendlyMessage);
                } catch (errorHandlingError) {
                  console.error('Error al manejar error de autenticación:', errorHandlingError);
                  utils.showError(elements.errorMessage, 'Error crítico en el sistema de autenticación');
                }
              })
              .finally(() => {
                try {
                  utils.setLoading(false);
                } catch (error) {
                  console.error('Error al restablecer estado de carga:', error);
                }
              });

          } catch (error) {
            console.error('Error crítico en handleFormSubmit:', error);
            utils.setLoading(false);
            utils.showError(elements.errorMessage, 'Error crítico al procesar el formulario');
          }
        }

        // Manejadores de input para limpiar errores
        function handleEmailInput() {
          try {
            utils.hideError(elements.emailError);
          } catch (error) {
            console.error('Error en handleEmailInput:', error);
          }
        }

        function handlePasswordInput() {
          try {
            utils.hideError(elements.passwordError);
          } catch (error) {
            console.error('Error en handlePasswordInput:', error);
          }
        }

        // Inicialización principal
        if (!initializeElements()) {
          return; // Salir si no se pueden inicializar los elementos
        }

        // Agregar event listeners con manejo de errores
        try {
          if (elements.form) {
            elements.form.addEventListener('submit', handleFormSubmit);
          }

          if (elements.email) {
            elements.email.addEventListener('input', handleEmailInput);
          }

          if (elements.password) {
            elements.password.addEventListener('input', handlePasswordInput);
          }

          console.log('Login inicializado correctamente');
        } catch (error) {
          console.error('Error al agregar event listeners:', error);
          showFallbackError('Error al inicializar la página de login');
        }

      } catch (criticalError) {
        console.error('Error crítico en initializeLogin:', criticalError);
        showFallbackError('Error crítico al cargar la página. Por favor, recarga la página.');
      }
    }

    // Manejo de errores globales para el script
    window.addEventListener('error', (event) => {
      console.error('Error global capturado:', event.error);
    });

    window.addEventListener('unhandledrejection', (event) => {
      console.error('Promesa rechazada no manejada:', event.reason);
    });

function showFallbackError(arg0: string) {
throw new Error("Function not implemented.");
}
  </script>
</BaseLayout>